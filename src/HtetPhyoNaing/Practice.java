/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HtetPhyoNaing;

import HtetPhyoNaing.Model.Vocabulary;
import java.awt.Component;
import java.awt.Font;
import java.awt.FontFormatException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
/**
 *
 * @author GIC
 */
public class Practice extends javax.swing.JPanel {    
    private Font jpFont;
    private Font myanmarFont;
    private DefaultTableCellRenderer tableCellRenderer;

    /**
     * Creates new form Practice
     * @throws java.io.IOException
     */
    public Practice() throws IOException {
        initComponents();
        this.setSize(820, 658);
        
        createFonts();
        
        // disable table to be editable
        tablePracticeVoca.setDefaultEditor(Object.class, null);
    }
    
    private void createFonts() {
        try {
            jpFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getClassLoader().getResourceAsStream("HtetPhyoNaing/Resources/Fonts/MHGKyokashotaiTHK-Light.ttf")).deriveFont(22f);
            myanmarFont = Font.createFont(Font.TRUETYPE_FONT, getClass().getClassLoader().getResourceAsStream("HtetPhyoNaing/Resources/Fonts/Pyidaungsu-1.8_regular.ttf")).deriveFont(15f);
        } catch (IOException | FontFormatException e) {
            System.out.println(e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cboxChooseAllOrFavInPracticePage = new javax.swing.JComboBox<>();
        labelChooseTypeOfPracticeInPracticePage = new javax.swing.JLabel();
        labelChooseTypeOfPracticeFromInPracticePage = new javax.swing.JLabel();
        cboxFromLessonInPracticePage = new javax.swing.JComboBox<>();
        cboxToLessonInPracticePage = new javax.swing.JComboBox<>();
        labelChooseTypeOfPracticeToInPracticePage = new javax.swing.JLabel();
        btnStartInPracticePage = new javax.swing.JButton();
        cboxIWantToSeeInPracticePage = new javax.swing.JComboBox<>();
        labelIWantToSeeInPracticePage = new javax.swing.JLabel();
        labelTotalRowsInPracticePage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePracticeVoca = new javax.swing.JTable();
        labelJPAnswerInPracticePage = new javax.swing.JLabel();
        labelMMAnswerInPracticePage = new javax.swing.JLabel();
        labelTableDescInPracticePage = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(820, 658));

        cboxChooseAllOrFavInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        cboxChooseAllOrFavInPracticePage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Vocabularies", "Only Favorites" }));
        cboxChooseAllOrFavInPracticePage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cboxChooseAllOrFavInPracticePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxChooseAllOrFavInPracticePageActionPerformed(evt);
            }
        });

        labelChooseTypeOfPracticeInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        labelChooseTypeOfPracticeInPracticePage.setForeground(new java.awt.Color(94, 0, 126));
        labelChooseTypeOfPracticeInPracticePage.setText("Choose type of practice");

        labelChooseTypeOfPracticeFromInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        labelChooseTypeOfPracticeFromInPracticePage.setForeground(new java.awt.Color(94, 0, 126));
        labelChooseTypeOfPracticeFromInPracticePage.setText("From");

        cboxFromLessonInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        cboxFromLessonInPracticePage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lesson 1", "Lesson 2", "Lesson 3", "Lesson 4", "Lesson 5", "Lesson 6", "Lesson 7", "Lesson 8", "Lesson 8", "Lesson 9", "Lesson 10", "Lesson 11", "Lesson 12", "Lesson 13", "Lesson 14", "Lesson 15", "Lesson 16", "Lesson 17", "Lesson 18", "Lesson 19", "Lesson 20", "Lesson 21", "Lesson 22", "Lesson 23", "Lesson 24", "Lesson 25" }));
        cboxFromLessonInPracticePage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cboxFromLessonInPracticePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxFromLessonInPracticePageActionPerformed(evt);
            }
        });

        cboxToLessonInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        cboxToLessonInPracticePage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Lesson 1", "Lesson 2", "Lesson 3", "Lesson 4", "Lesson 5", "Lesson 6", "Lesson 7", "Lesson 8", "Lesson 8", "Lesson 9", "Lesson 10", "Lesson 11", "Lesson 12", "Lesson 13", "Lesson 14", "Lesson 15", "Lesson 16", "Lesson 17", "Lesson 18", "Lesson 19", "Lesson 20", "Lesson 21", "Lesson 22", "Lesson 23", "Lesson 24", "Lesson 25" }));
        cboxToLessonInPracticePage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cboxToLessonInPracticePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxToLessonInPracticePageActionPerformed(evt);
            }
        });

        labelChooseTypeOfPracticeToInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        labelChooseTypeOfPracticeToInPracticePage.setForeground(new java.awt.Color(94, 0, 126));
        labelChooseTypeOfPracticeToInPracticePage.setText("To");

        btnStartInPracticePage.setBackground(new java.awt.Color(0, 0, 0));
        btnStartInPracticePage.setFont(new java.awt.Font("Century", 0, 18)); // NOI18N
        btnStartInPracticePage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/HtetPhyoNaing/Resources/Images/img-btn-go.png"))); // NOI18N
        btnStartInPracticePage.setText("Start");
        btnStartInPracticePage.setBorder(null);
        btnStartInPracticePage.setBorderPainted(false);
        btnStartInPracticePage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnStartInPracticePage.setOpaque(false);
        btnStartInPracticePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartInPracticePageActionPerformed(evt);
            }
        });

        cboxIWantToSeeInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        cboxIWantToSeeInPracticePage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Myanmar Meaning", "Japanese Word" }));
        cboxIWantToSeeInPracticePage.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cboxIWantToSeeInPracticePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxIWantToSeeInPracticePageActionPerformed(evt);
            }
        });

        labelIWantToSeeInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        labelIWantToSeeInPracticePage.setForeground(new java.awt.Color(94, 0, 126));
        labelIWantToSeeInPracticePage.setText("I want to see");

        labelTotalRowsInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        labelTotalRowsInPracticePage.setForeground(new java.awt.Color(94, 0, 126));
        labelTotalRowsInPracticePage.setText("Total Rows: 0");

        tablePracticeVoca.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tablePracticeVoca.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablePracticeVoca.setAlignmentY(0.3F);
        tablePracticeVoca.setColumnSelectionAllowed(true);
        tablePracticeVoca.setFillsViewportHeight(true);
        tablePracticeVoca.setFocusable(false);
        tablePracticeVoca.setGridColor(new java.awt.Color(243, 235, 245));
        tablePracticeVoca.setRequestFocusEnabled(false);
        tablePracticeVoca.setRowHeight(27);
        tablePracticeVoca.setSelectionBackground(new java.awt.Color(237, 226, 240));
        tablePracticeVoca.setSelectionForeground(new java.awt.Color(94, 0, 126));
        tablePracticeVoca.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablePracticeVoca.getTableHeader().setResizingAllowed(false);
        tablePracticeVoca.getTableHeader().setReorderingAllowed(false);
        tablePracticeVoca.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablePracticeVocaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablePracticeVoca);
        tablePracticeVoca.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        labelTableDescInPracticePage.setFont(new java.awt.Font("Century", 0, 14)); // NOI18N
        labelTableDescInPracticePage.setForeground(new java.awt.Color(153, 153, 153));
        labelTableDescInPracticePage.setText("You can check the answer by clicking the table row.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelJPAnswerInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 494, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelMMAnswerInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 594, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelChooseTypeOfPracticeInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxChooseAllOrFavInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(labelTotalRowsInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelTableDescInPracticePage))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(labelChooseTypeOfPracticeFromInPracticePage)
                                    .addGap(79, 79, 79)
                                    .addComponent(labelChooseTypeOfPracticeToInPracticePage))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cboxFromLessonInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cboxToLessonInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGap(24, 24, 24)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(labelIWantToSeeInPracticePage)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cboxIWantToSeeInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(25, 25, 25)
                                    .addComponent(btnStartInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(196, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(labelChooseTypeOfPracticeInPracticePage)
                .addGap(6, 6, 6)
                .addComponent(cboxChooseAllOrFavInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelChooseTypeOfPracticeFromInPracticePage)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(labelChooseTypeOfPracticeToInPracticePage)))
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboxFromLessonInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cboxToLessonInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelIWantToSeeInPracticePage)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cboxIWantToSeeInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnStartInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelTotalRowsInPracticePage)
                    .addComponent(labelTableDescInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelJPAnswerInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(labelMMAnswerInPracticePage, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboxChooseAllOrFavInPracticePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxChooseAllOrFavInPracticePageActionPerformed
        cboxPracticeChooseAllorFav();
    }//GEN-LAST:event_cboxChooseAllOrFavInPracticePageActionPerformed

    public void cboxPracticeChooseAllorFav() {
        int practiceType = getCboxPracticeChooseAllOrFav().getSelectedIndex(); // 0 - All, 1 - Fav
        
        if (practiceType == 1) {
            cboxFromLessonInPracticePage.removeAllItems();
            cboxToLessonInPracticePage.removeAllItems();
            
            Vocabulary vocabulary = new Vocabulary();
            vocabulary.setFavoriteLessons(cboxFromLessonInPracticePage, cboxToLessonInPracticePage);
        }
        else if (practiceType == 0) {
            cboxFromLessonInPracticePage.removeAllItems();
            cboxToLessonInPracticePage.removeAllItems();
            
            for(int i = 1; i < 26; i++) {
                cboxFromLessonInPracticePage.addItem("Lesson " + i);
                cboxToLessonInPracticePage.addItem("Lesson " + i);
            }
        }
    }
    
    private void cboxFromLessonInPracticePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxFromLessonInPracticePageActionPerformed

    }//GEN-LAST:event_cboxFromLessonInPracticePageActionPerformed

    private void cboxToLessonInPracticePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxToLessonInPracticePageActionPerformed

    }//GEN-LAST:event_cboxToLessonInPracticePageActionPerformed

    private void btnStartInPracticePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartInPracticePageActionPerformed
        int from, to;
        
        int practiceType = getCboxPracticeChooseAllOrFav().getSelectedIndex(); // 0 - All, 1 - Fav
        int seen = cboxIWantToSeeInPracticePage.getSelectedIndex(); // 0 - myanmar, 1 - japanese
        
        if (practiceType == 1) {
            from = Integer.parseInt(cboxFromLessonInPracticePage.getSelectedItem().toString().split(" ")[1]);
            to = Integer.parseInt(cboxToLessonInPracticePage.getSelectedItem().toString().split(" ")[1]);
        }
        else {
            from = cboxFromLessonInPracticePage.getSelectedIndex() + 1;
            to = cboxToLessonInPracticePage.getSelectedIndex() + 1;
        }
        
        tablePracticeVoca.setVisible(true);
        Vocabulary vocabulary = new Vocabulary();
        vocabulary.generate(from, to, practiceType, tablePracticeVoca, labelTotalRowsInPracticePage);
        setUpPracticeTable(seen);
    }//GEN-LAST:event_btnStartInPracticePageActionPerformed

    private void cboxIWantToSeeInPracticePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxIWantToSeeInPracticePageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboxIWantToSeeInPracticePageActionPerformed

    private void tablePracticeVocaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablePracticeVocaMouseClicked
        int row = tablePracticeVoca.getSelectedRow();
        if (row != -1) {
            String jpAnswer = tablePracticeVoca.getModel().getValueAt(row, 0).toString();
            String mmAnswer = tablePracticeVoca.getModel().getValueAt(row, 1).toString();

            getLabelPracticeVocaJPAnswer().setText(jpAnswer);
            getLabelPracticeVocaMMAnswer().setText(mmAnswer);
        }
    }//GEN-LAST:event_tablePracticeVocaMouseClicked
      
    
    
    private void setUpPracticeTable(int seen) {            
        int showColumn = 0;
            
        if(seen == 0) { // want to see Myanmar Meaning
            tablePracticeVoca.setFont(myanmarFont);
                
            tablePracticeVoca.getColumnModel().getColumn(0).setMinWidth(0);
            tablePracticeVoca.getColumnModel().getColumn(0).setMaxWidth(0);
            tablePracticeVoca.getColumnModel().getColumn(0).setWidth(0);
                
            showColumn = 1;
        }
        else if (seen == 1) { // want to see Japanese Word
            tablePracticeVoca.setFont(jpFont);
                
            tablePracticeVoca.getColumnModel().getColumn(1).setMinWidth(0);
            tablePracticeVoca.getColumnModel().getColumn(1).setMaxWidth(0);
            tablePracticeVoca.getColumnModel().getColumn(1).setWidth(0);
                
            showColumn = 0;
        }
            
        tableCellRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
                return this;
            }
        };
            
        tablePracticeVoca.getColumnModel().getColumn(showColumn).setCellRenderer(tableCellRenderer);
    }
    
    /**
     * @return the labelPracticeTableDesc
     */
    public javax.swing.JLabel getLabelPracticeTableDesc() {
        return labelTableDescInPracticePage;
    }

    /**
     * @param labelPracticeTableDesc the labelPracticeTableDesc to set
     */
    public void setLabelPracticeTableDesc(javax.swing.JLabel labelPracticeTableDesc) {
        this.labelTableDescInPracticePage = labelPracticeTableDesc;
    }

    /**
     * @return the labelPracticeVocaJPAnswer
     */
    public javax.swing.JLabel getLabelPracticeVocaJPAnswer() {
        return labelJPAnswerInPracticePage;
    }

    /**
     * @param labelPracticeVocaJPAnswer the labelPracticeVocaJPAnswer to set
     */
    public void setLabelPracticeVocaJPAnswer(javax.swing.JLabel labelPracticeVocaJPAnswer) {
        this.labelJPAnswerInPracticePage = labelPracticeVocaJPAnswer;
    }

    /**
     * @return the labelPracticeVocaMMAnswer
     */
    public javax.swing.JLabel getLabelPracticeVocaMMAnswer() {
        return labelMMAnswerInPracticePage;
    }

    /**
     * @param labelPracticeVocaMMAnswer the labelPracticeVocaMMAnswer to set
     */
    public void setLabelPracticeVocaMMAnswer(javax.swing.JLabel labelPracticeVocaMMAnswer) {
        this.labelMMAnswerInPracticePage = labelPracticeVocaMMAnswer;
    }

    /**
     * @return the labelPracticeTotalRows
     */
    public javax.swing.JLabel getLabelPracticeTotalRows() {
        return labelTotalRowsInPracticePage;
    }

    /**
     * @param labelPracticeTotalRows the labelPracticeTotalRows to set
     */
    public void setLabelPracticeTotalRows(javax.swing.JLabel labelPracticeTotalRows) {
        this.labelTotalRowsInPracticePage = labelPracticeTotalRows;
    }

    /**
     * @return the tablePracticeVoca
     */
    public javax.swing.JTable getTablePracticeVoca() {
        return tablePracticeVoca;
    }

    /**
     * @param tablePracticeVoca the tablePracticeVoca to set
     */
    public void setTablePracticeVoca(javax.swing.JTable tablePracticeVoca) {
        this.tablePracticeVoca = tablePracticeVoca;
    }

    /**
     * @return the cboxPracticeFromWantToSee
     */
    public javax.swing.JComboBox<String> getCboxPracticeFromWantToSee() {
        return cboxIWantToSeeInPracticePage;
    }

    /**
     * @param cboxPracticeFromWantToSee the cboxPracticeFromWantToSee to set
     */
    public void setCboxPracticeFromWantToSee(javax.swing.JComboBox<String> cboxPracticeFromWantToSee) {
        this.cboxIWantToSeeInPracticePage = cboxPracticeFromWantToSee;
    }

    /**
     * @return the labelPracticeIWantToSee
     */
    public javax.swing.JLabel getLabelPracticeIWantToSee() {
        return labelIWantToSeeInPracticePage;
    }

    /**
     * @param labelPracticeIWantToSee the labelPracticeIWantToSee to set
     */
    public void setLabelPracticeIWantToSee(javax.swing.JLabel labelPracticeIWantToSee) {
        this.labelIWantToSeeInPracticePage = labelPracticeIWantToSee;
    }

    /**
     * @return the btnPracticeVoca
     */
    public javax.swing.JButton getBtnPracticeVoca() {
        return btnStartInPracticePage;
    }

    /**
     * @param btnPracticeVoca the btnPracticeVoca to set
     */
    public void setBtnPracticeVoca(javax.swing.JButton btnPracticeVoca) {
        this.btnStartInPracticePage = btnPracticeVoca;
    }

    /**
     * @return the cboxPracticeChooseAllOrFav
     */
    public javax.swing.JComboBox<String> getCboxPracticeChooseAllOrFav() {
        return cboxChooseAllOrFavInPracticePage;
    }

    /**
     * @param cboxPracticeChooseAllOrFav the cboxPracticeChooseAllOrFav to set
     */
    public void setCboxPracticeChooseAllOrFav(javax.swing.JComboBox<String> cboxPracticeChooseAllOrFav) {
        this.cboxChooseAllOrFavInPracticePage = cboxPracticeChooseAllOrFav;
    }

    /**
     * @return the cboxPracticeFromLesson
     */
    public javax.swing.JComboBox<String> getCboxPracticeFromLesson() {
        return cboxFromLessonInPracticePage;
    }

    /**
     * @param cboxPracticeFromLesson the cboxPracticeFromLesson to set
     */
    public void setCboxPracticeFromLesson(javax.swing.JComboBox<String> cboxPracticeFromLesson) {
        this.cboxFromLessonInPracticePage = cboxPracticeFromLesson;
    }

    /**
     * @return the cboxPracticeLessonTo
     */
    public javax.swing.JComboBox<String> getCboxPracticeLessonTo() {
        return cboxToLessonInPracticePage;
    }

    /**
     * @param cboxPracticeLessonTo the cboxPracticeLessonTo to set
     */
    public void setCboxPracticeLessonTo(javax.swing.JComboBox<String> cboxPracticeLessonTo) {
        this.cboxToLessonInPracticePage = cboxPracticeLessonTo;
    }

    /**
     * @return the labelPracticeChooseTypeOfPractice
     */
    public javax.swing.JLabel getLabelPracticeChooseTypeOfPractice() {
        return labelChooseTypeOfPracticeInPracticePage;
    }

    /**
     * @param labelPracticeChooseTypeOfPractice the labelPracticeChooseTypeOfPractice to set
     */
    public void setLabelPracticeChooseTypeOfPractice(javax.swing.JLabel labelPracticeChooseTypeOfPractice) {
        this.labelChooseTypeOfPracticeInPracticePage = labelPracticeChooseTypeOfPractice;
    }

    /**
     * @return the labelPracticeChooseTypeOfPracticeFrom
     */
    public javax.swing.JLabel getLabelPracticeChooseTypeOfPracticeFrom() {
        return labelChooseTypeOfPracticeFromInPracticePage;
    }

    /**
     * @param labelPracticeChooseTypeOfPracticeFrom the labelPracticeChooseTypeOfPracticeFrom to set
     */
    public void setLabelPracticeChooseTypeOfPracticeFrom(javax.swing.JLabel labelPracticeChooseTypeOfPracticeFrom) {
        this.labelChooseTypeOfPracticeFromInPracticePage = labelPracticeChooseTypeOfPracticeFrom;
    }

    /**
     * @return the labelPracticeChooseTypeOfPracticeTo
     */
    public javax.swing.JLabel getLabelPracticeChooseTypeOfPracticeTo() {
        return labelChooseTypeOfPracticeToInPracticePage;
    }

    /**
     * @param labelPracticeChooseTypeOfPracticeTo the labelPracticeChooseTypeOfPracticeTo to set
     */
    public void setLabelPracticeChooseTypeOfPracticeTo(javax.swing.JLabel labelPracticeChooseTypeOfPracticeTo) {
        this.labelChooseTypeOfPracticeToInPracticePage = labelPracticeChooseTypeOfPracticeTo;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStartInPracticePage;
    private javax.swing.JComboBox<String> cboxChooseAllOrFavInPracticePage;
    private javax.swing.JComboBox<String> cboxFromLessonInPracticePage;
    private javax.swing.JComboBox<String> cboxIWantToSeeInPracticePage;
    private javax.swing.JComboBox<String> cboxToLessonInPracticePage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelChooseTypeOfPracticeFromInPracticePage;
    private javax.swing.JLabel labelChooseTypeOfPracticeInPracticePage;
    private javax.swing.JLabel labelChooseTypeOfPracticeToInPracticePage;
    private javax.swing.JLabel labelIWantToSeeInPracticePage;
    private javax.swing.JLabel labelJPAnswerInPracticePage;
    private javax.swing.JLabel labelMMAnswerInPracticePage;
    private javax.swing.JLabel labelTableDescInPracticePage;
    private javax.swing.JLabel labelTotalRowsInPracticePage;
    private javax.swing.JTable tablePracticeVoca;
    // End of variables declaration//GEN-END:variables
}
